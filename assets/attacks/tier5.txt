Does the following code compile?\n @int main() {@\n @{}@\n @{};@\n @[]{};@\n @[]{}();@\n @{{{}}};@\n @[]}{}{}{}();@\n @[]}{}{}(){}{}();@\n }@\n endl A) Yes, it compiles successfully\n B) No, because of a syntax error\n C) No, because the lambda expressions are invalid\n D) No, because of mismatched braces\n ans:A~

What is the output of the following code?\n @int main() {@\n @bool b = true;@\n @std::cout << ++b;@\n }@\n endl A) 1\n B) 2\n C) true\n D) Undefined Behavior\n ans:B~

What is the output of the following code?\n @int main() {@\n @char str[3] = "Pie";@\n @std::cout << str;@\n }@\n endl A) Pie\n B) Pi\n C) Undefined Behavior\n D) Compilation Error\n ans:D~

What does the following code print?\n @int x = 0;@\n @std::cout << (x-- > 0 ? "Positive" : "Negative");@\n endl A) Positive\n B) Negative\n C) Compilation Error\n D) Undefined Behavior\n ans:B~

Which of the following statements about `std::vector` is correct?\n endl A) It supports dynamic resizing\n B) It uses linked list-based storage internally\n C) It requires manual memory deallocation\n D) It cannot store objects of user-defined types\n ans:A~

What is the result of this code?\n @int x = 5 / 2 * 2;@\n ans:4~

What does `sizeof('a')` return in C++?\n ans:4~

What happens when you increment a pointer to an array beyond its bounds?\n ans:undefined~

What is the value of `sizeof(int)` on a 32-bit system?\n ans:4~

What happens when you assign a string literal to a `char*`?\n ans:undefined~

What will this code print?\n @int main() {@\n @int x = 5;@\n @int &y = x;@\n @y++;@\n @std::cout << x;@\n }@\n ans:6~

What keyword prevents inheritance in C++?\n ans:final~

What is the result of `x = x++ + ++x;` for `int x = 1`?\n ans:undefined~

What happens when you call `delete` on a pointer twice?\n ans:undefined~

What does the following expression return: `5 | 3`?\n ans:7~

What is the result of accessing `arr[-1]` in C++?\n ans:undefined~

What is the output of this code?\n @int arr[3] = {1, 2, 3};@\n @std::cout << arr[3];@\n ans:undefined~

What does the following code output?\n @int main() {@\n @bool b = true;@\n @std::cout << b + 1;@\n }@\n ans:2~

What happens when you use a dangling reference?\n ans:undefined~

What is the result of this code?\n @int x = 1;@\n @std::cout << (x == 1) ? "True" : "False";@\n ans:True~